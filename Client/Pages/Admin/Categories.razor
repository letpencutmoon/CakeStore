@page "/admin/category"
@inject ICategoryService categoryservice
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable

<div class="header">
	<div class="col">名称</div>
	<div class="col">URL</div>
	<div class="col">可见性</div>
	<div class="col"></div>
</div>

@foreach (var item in categoryservice.AdminCategories)
{
	@if (item.Editing)
	{
		<EditForm Model="editingCategory" OnSubmit="UpdateCategory">
			<div class="row">
				<div class="col">
					<InputText @bind-Value="editingCategory.Name" class="form-control"></InputText>
				</div>
				<div class="col">
					<InputText @bind-Value="editingCategory.Url" class="form-control"></InputText>
				</div>
				<div class="col col-visible">
					<InputCheckbox @bind-Value="editingCategory.Visible" style="transform:scale(1.5,1.5);" class="big-checkbox"></InputCheckbox>
				</div>
				<div class="col">
					<button type="submit" class="btn btn-primary">
						<i class="oi oi-cloud-upload"></i>
					</button>
					<button class="btn btn-primary" @onclick="CancelEditing">
						<i class="oi oi-circle-x"></i>
					</button>
				</div>
			</div>
		</EditForm>
	}
	else
	{
		<div class="row">
			<div class="col">
				@item.Name
			</div>
			<div class="col">
				@item.Url
			</div>
			<div class="col col-visible">
				<span>@(item.Visible ? "✔️":"")</span>
			</div>
			<div class="col">
					<button class="btn btn-primary" @onclick="(()=>EditCategory(item))">
						<i class="oi oi-pencil"></i>
					</button>
					<button class="btn btn-primary" @onclick="(()=>DeleteCategory(item.ID))">
						<i class="oi oi-trash"></i>
					</button>
				</div>
		</div>
	}
}
<button class="btn btn-promary" @onclick="CreateCategory">
	<i class="oi oi-plus"></i>添加新类型
</button>


@code {
	Category editingCategory = null;

	protected override async Task OnInitializedAsync()
	{
		await categoryservice.GetAdminCategories();
		categoryservice.OnChange += StateHasChanged;
	}

	public void Dispose()
	{
		categoryservice.OnChange -= StateHasChanged;
	}

	private void CreateCategory()
	{
		editingCategory =categoryservice.CreateNewCategory();
	}

	private void EditCategory(Category category)
	{
		category.Editing = true;
		editingCategory = category;
	}

	private async Task UpdateCategory()
	{
		if (editingCategory.IsNew)
		{
			await categoryservice.AddCategory(editingCategory);
		}
		else
		{
			await categoryservice.UpdateCategory(editingCategory);
		}
		editingCategory = new();
	}

	private async Task CancelEditing()
	{
		editingCategory = new();
		await categoryservice.GetAdminCategories();
	}

	private async Task DeleteCategory(int id)
	{
		await categoryservice.DeleteCategory(id);
	}
}
