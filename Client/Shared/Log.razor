@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService authservice
@inject ILocalStorageService localstorage
@inject NavigationManager navigationmanager
@inject AuthenticationStateProvider provider
@inject ICartService cartservice

<EditForm Model="user" OnValidSubmit="HandleLogin">
<DataAnnotationsValidator/>

<div class="mat-layout-grid">
	<div class="mat-layout-grid-inner">
		<div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
			<p>
				<MatTextField Label="电话号码" @bind-Value="user.Tel" FullWidth="true" Outlined="true"/>
				<ValidationMessage For="@(() => user.Tel)"/>
			</p>

			<p>
				<MatTextField Label="密码" @bind-Value="user.Password" Type="password" FullWidth="true" Outlined="true"/>
				<ValidationMessage For="@(() => user.Password)"/>
			</p>
		</div>

		<div class="mat-layout-grid-cell mat-layout-grid-cell-span-2"></div>
		<div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
			<MatButton Type="submit" Raised="true">登录</MatButton>
			
		</div>
		<div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
			<MatButton Raised="true" OnClick="Reset">重置</MatButton>
		</div>
		<div class="mat-layout-grid-cell mat-layout-grid-cell-span-2"></div>
		<div class="mat-layout-grid-mat-layout-grid-cell-span-12 ">
			<span>@message</span>
		</div>
	</div>

</div>

</EditForm>





@code{
	string message = string.Empty;

	private string returnUrl = string.Empty;

	protected override void OnInitialized()
	{
		var uri = navigationmanager.ToAbsoluteUri(navigationmanager.Uri);
		if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl",out var url))
		{
			returnUrl = url;
		}
	}

	public void Reset()
	{
		user.Password = string.Empty;
		user.Tel = string.Empty;
	}

	public UserLogin user = new()
	{
		Tel = string.Empty,
		Password = string.Empty
	};

	public async void HandleLogin()
	{
		var response = await authservice.LogIn(user);
		if (response == null)
		{
			message = "登录失败";
		}
		else if(response.Success)
		{
			message = string.Empty;

			await localstorage.SetItemAsync("authToken",response.Data);
			await provider.GetAuthenticationStateAsync();
			await cartservice.StoreCartItem(true);
			await cartservice.GetCarItemsCount();
			navigationmanager.NavigateTo(returnUrl);
		}
		else
		{
			message = response.Message;
		}
	}
}